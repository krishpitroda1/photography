{"version":3,"file":"static/js/458.f6660092.chunk.js","mappings":"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","sources":["../node_modules/motion-dom/dist/es/scroll/observe.mjs","../node_modules/motion-dom/dist/es/resize/handle-element.mjs","../node_modules/motion-dom/dist/es/resize/handle-window.mjs","../node_modules/framer-motion/dist/es/render/dom/scroll/info.mjs","../node_modules/framer-motion/dist/es/render/dom/scroll/offsets/edge.mjs","../node_modules/framer-motion/dist/es/render/dom/scroll/offsets/offset.mjs","../node_modules/framer-motion/dist/es/render/dom/scroll/offsets/presets.mjs","../node_modules/framer-motion/dist/es/render/dom/scroll/offsets/index.mjs","../node_modules/framer-motion/dist/es/render/dom/scroll/offsets/inset.mjs","../node_modules/framer-motion/dist/es/render/dom/scroll/on-scroll-handler.mjs","../node_modules/framer-motion/dist/es/render/dom/scroll/track.mjs","../node_modules/motion-dom/dist/es/resize/index.mjs","../node_modules/framer-motion/dist/es/render/dom/scroll/utils/get-timeline.mjs","../node_modules/framer-motion/dist/es/render/dom/scroll/index.mjs","../node_modules/framer-motion/dist/es/render/dom/scroll/attach-function.mjs","../node_modules/framer-motion/dist/es/render/dom/scroll/attach-animation.mjs","../node_modules/framer-motion/dist/es/value/use-scroll.mjs","../node_modules/framer-motion/dist/es/value/use-combine-values.mjs","../node_modules/framer-motion/dist/es/value/use-motion-value.mjs","../node_modules/framer-motion/dist/es/value/use-transform.mjs","../node_modules/framer-motion/dist/es/value/use-computed.mjs","../node_modules/motion-dom/dist/es/utils/transform.mjs"],"sourcesContent":["import { frame, cancelFrame } from '../frameloop/frame.mjs';\n\nfunction observeTimeline(update, timeline) {\n    let prevProgress;\n    const onFrame = () => {\n        const { currentTime } = timeline;\n        const percentage = currentTime === null ? 0 : currentTime.value;\n        const progress = percentage / 100;\n        if (prevProgress !== progress) {\n            update(progress);\n        }\n        prevProgress = progress;\n    };\n    frame.preUpdate(onFrame, true);\n    return () => cancelFrame(onFrame);\n}\n\nexport { observeTimeline };\n","import { isSVGElement } from '../utils/is-svg-element.mjs';\nimport { resolveElements } from '../utils/resolve-elements.mjs';\n\nconst resizeHandlers = new WeakMap();\nlet observer;\nconst getSize = (borderBoxAxis, svgAxis, htmlAxis) => (target, borderBoxSize) => {\n    if (borderBoxSize && borderBoxSize[0]) {\n        return borderBoxSize[0][(borderBoxAxis + \"Size\")];\n    }\n    else if (isSVGElement(target) && \"getBBox\" in target) {\n        return target.getBBox()[svgAxis];\n    }\n    else {\n        return target[htmlAxis];\n    }\n};\nconst getWidth = /*@__PURE__*/ getSize(\"inline\", \"width\", \"offsetWidth\");\nconst getHeight = /*@__PURE__*/ getSize(\"block\", \"height\", \"offsetHeight\");\nfunction notifyTarget({ target, borderBoxSize }) {\n    resizeHandlers.get(target)?.forEach((handler) => {\n        handler(target, {\n            get width() {\n                return getWidth(target, borderBoxSize);\n            },\n            get height() {\n                return getHeight(target, borderBoxSize);\n            },\n        });\n    });\n}\nfunction notifyAll(entries) {\n    entries.forEach(notifyTarget);\n}\nfunction createResizeObserver() {\n    if (typeof ResizeObserver === \"undefined\")\n        return;\n    observer = new ResizeObserver(notifyAll);\n}\nfunction resizeElement(target, handler) {\n    if (!observer)\n        createResizeObserver();\n    const elements = resolveElements(target);\n    elements.forEach((element) => {\n        let elementHandlers = resizeHandlers.get(element);\n        if (!elementHandlers) {\n            elementHandlers = new Set();\n            resizeHandlers.set(element, elementHandlers);\n        }\n        elementHandlers.add(handler);\n        observer?.observe(element);\n    });\n    return () => {\n        elements.forEach((element) => {\n            const elementHandlers = resizeHandlers.get(element);\n            elementHandlers?.delete(handler);\n            if (!elementHandlers?.size) {\n                observer?.unobserve(element);\n            }\n        });\n    };\n}\n\nexport { resizeElement };\n","const windowCallbacks = new Set();\nlet windowResizeHandler;\nfunction createWindowResizeHandler() {\n    windowResizeHandler = () => {\n        const info = {\n            get width() {\n                return window.innerWidth;\n            },\n            get height() {\n                return window.innerHeight;\n            },\n        };\n        windowCallbacks.forEach((callback) => callback(info));\n    };\n    window.addEventListener(\"resize\", windowResizeHandler);\n}\nfunction resizeWindow(callback) {\n    windowCallbacks.add(callback);\n    if (!windowResizeHandler)\n        createWindowResizeHandler();\n    return () => {\n        windowCallbacks.delete(callback);\n        if (!windowCallbacks.size &&\n            typeof windowResizeHandler === \"function\") {\n            window.removeEventListener(\"resize\", windowResizeHandler);\n            windowResizeHandler = undefined;\n        }\n    };\n}\n\nexport { resizeWindow };\n","import { progress, velocityPerSecond } from 'motion-utils';\n\n/**\n * A time in milliseconds, beyond which we consider the scroll velocity to be 0.\n */\nconst maxElapsed = 50;\nconst createAxisInfo = () => ({\n    current: 0,\n    offset: [],\n    progress: 0,\n    scrollLength: 0,\n    targetOffset: 0,\n    targetLength: 0,\n    containerLength: 0,\n    velocity: 0,\n});\nconst createScrollInfo = () => ({\n    time: 0,\n    x: createAxisInfo(),\n    y: createAxisInfo(),\n});\nconst keys = {\n    x: {\n        length: \"Width\",\n        position: \"Left\",\n    },\n    y: {\n        length: \"Height\",\n        position: \"Top\",\n    },\n};\nfunction updateAxisInfo(element, axisName, info, time) {\n    const axis = info[axisName];\n    const { length, position } = keys[axisName];\n    const prev = axis.current;\n    const prevTime = info.time;\n    axis.current = element[`scroll${position}`];\n    axis.scrollLength = element[`scroll${length}`] - element[`client${length}`];\n    axis.offset.length = 0;\n    axis.offset[0] = 0;\n    axis.offset[1] = axis.scrollLength;\n    axis.progress = progress(0, axis.scrollLength, axis.current);\n    const elapsed = time - prevTime;\n    axis.velocity =\n        elapsed > maxElapsed\n            ? 0\n            : velocityPerSecond(axis.current - prev, elapsed);\n}\nfunction updateScrollInfo(element, info, time) {\n    updateAxisInfo(element, \"x\", info, time);\n    updateAxisInfo(element, \"y\", info, time);\n    info.time = time;\n}\n\nexport { createScrollInfo, updateScrollInfo };\n","const namedEdges = {\n    start: 0,\n    center: 0.5,\n    end: 1,\n};\nfunction resolveEdge(edge, length, inset = 0) {\n    let delta = 0;\n    /**\n     * If we have this edge defined as a preset, replace the definition\n     * with the numerical value.\n     */\n    if (edge in namedEdges) {\n        edge = namedEdges[edge];\n    }\n    /**\n     * Handle unit values\n     */\n    if (typeof edge === \"string\") {\n        const asNumber = parseFloat(edge);\n        if (edge.endsWith(\"px\")) {\n            delta = asNumber;\n        }\n        else if (edge.endsWith(\"%\")) {\n            edge = asNumber / 100;\n        }\n        else if (edge.endsWith(\"vw\")) {\n            delta = (asNumber / 100) * document.documentElement.clientWidth;\n        }\n        else if (edge.endsWith(\"vh\")) {\n            delta = (asNumber / 100) * document.documentElement.clientHeight;\n        }\n        else {\n            edge = asNumber;\n        }\n    }\n    /**\n     * If the edge is defined as a number, handle as a progress value.\n     */\n    if (typeof edge === \"number\") {\n        delta = length * edge;\n    }\n    return inset + delta;\n}\n\nexport { namedEdges, resolveEdge };\n","import { resolveEdge, namedEdges } from './edge.mjs';\n\nconst defaultOffset = [0, 0];\nfunction resolveOffset(offset, containerLength, targetLength, targetInset) {\n    let offsetDefinition = Array.isArray(offset) ? offset : defaultOffset;\n    let targetPoint = 0;\n    let containerPoint = 0;\n    if (typeof offset === \"number\") {\n        /**\n         * If we're provided offset: [0, 0.5, 1] then each number x should become\n         * [x, x], so we default to the behaviour of mapping 0 => 0 of both target\n         * and container etc.\n         */\n        offsetDefinition = [offset, offset];\n    }\n    else if (typeof offset === \"string\") {\n        offset = offset.trim();\n        if (offset.includes(\" \")) {\n            offsetDefinition = offset.split(\" \");\n        }\n        else {\n            /**\n             * If we're provided a definition like \"100px\" then we want to apply\n             * that only to the top of the target point, leaving the container at 0.\n             * Whereas a named offset like \"end\" should be applied to both.\n             */\n            offsetDefinition = [offset, namedEdges[offset] ? offset : `0`];\n        }\n    }\n    targetPoint = resolveEdge(offsetDefinition[0], targetLength, targetInset);\n    containerPoint = resolveEdge(offsetDefinition[1], containerLength);\n    return targetPoint - containerPoint;\n}\n\nexport { resolveOffset };\n","const ScrollOffset = {\n    Enter: [\n        [0, 1],\n        [1, 1],\n    ],\n    Exit: [\n        [0, 0],\n        [1, 0],\n    ],\n    Any: [\n        [1, 0],\n        [0, 1],\n    ],\n    All: [\n        [0, 0],\n        [1, 1],\n    ],\n};\n\nexport { ScrollOffset };\n","import { interpolate, defaultOffset } from 'motion-dom';\nimport { clamp } from 'motion-utils';\nimport { calcInset } from './inset.mjs';\nimport { resolveOffset } from './offset.mjs';\nimport { ScrollOffset } from './presets.mjs';\n\nconst point = { x: 0, y: 0 };\nfunction getTargetSize(target) {\n    return \"getBBox\" in target && target.tagName !== \"svg\"\n        ? target.getBBox()\n        : { width: target.clientWidth, height: target.clientHeight };\n}\nfunction resolveOffsets(container, info, options) {\n    const { offset: offsetDefinition = ScrollOffset.All } = options;\n    const { target = container, axis = \"y\" } = options;\n    const lengthLabel = axis === \"y\" ? \"height\" : \"width\";\n    const inset = target !== container ? calcInset(target, container) : point;\n    /**\n     * Measure the target and container. If they're the same thing then we\n     * use the container's scrollWidth/Height as the target, from there\n     * all other calculations can remain the same.\n     */\n    const targetSize = target === container\n        ? { width: container.scrollWidth, height: container.scrollHeight }\n        : getTargetSize(target);\n    const containerSize = {\n        width: container.clientWidth,\n        height: container.clientHeight,\n    };\n    /**\n     * Reset the length of the resolved offset array rather than creating a new one.\n     * TODO: More reusable data structures for targetSize/containerSize would also be good.\n     */\n    info[axis].offset.length = 0;\n    /**\n     * Populate the offset array by resolving the user's offset definition into\n     * a list of pixel scroll offets.\n     */\n    let hasChanged = !info[axis].interpolate;\n    const numOffsets = offsetDefinition.length;\n    for (let i = 0; i < numOffsets; i++) {\n        const offset = resolveOffset(offsetDefinition[i], containerSize[lengthLabel], targetSize[lengthLabel], inset[axis]);\n        if (!hasChanged && offset !== info[axis].interpolatorOffsets[i]) {\n            hasChanged = true;\n        }\n        info[axis].offset[i] = offset;\n    }\n    /**\n     * If the pixel scroll offsets have changed, create a new interpolator function\n     * to map scroll value into a progress.\n     */\n    if (hasChanged) {\n        info[axis].interpolate = interpolate(info[axis].offset, defaultOffset(offsetDefinition), { clamp: false });\n        info[axis].interpolatorOffsets = [...info[axis].offset];\n    }\n    info[axis].progress = clamp(0, 1, info[axis].interpolate(info[axis].current));\n}\n\nexport { resolveOffsets };\n","import { isHTMLElement } from 'motion-dom';\n\nfunction calcInset(element, container) {\n    const inset = { x: 0, y: 0 };\n    let current = element;\n    while (current && current !== container) {\n        if (isHTMLElement(current)) {\n            inset.x += current.offsetLeft;\n            inset.y += current.offsetTop;\n            current = current.offsetParent;\n        }\n        else if (current.tagName === \"svg\") {\n            /**\n             * This isn't an ideal approach to measuring the offset of <svg /> tags.\n             * It would be preferable, given they behave like HTMLElements in most ways\n             * to use offsetLeft/Top. But these don't exist on <svg />. Likewise we\n             * can't use .getBBox() like most SVG elements as these provide the offset\n             * relative to the SVG itself, which for <svg /> is usually 0x0.\n             */\n            const svgBoundingBox = current.getBoundingClientRect();\n            current = current.parentElement;\n            const parentBoundingBox = current.getBoundingClientRect();\n            inset.x += svgBoundingBox.left - parentBoundingBox.left;\n            inset.y += svgBoundingBox.top - parentBoundingBox.top;\n        }\n        else if (current instanceof SVGGraphicsElement) {\n            const { x, y } = current.getBBox();\n            inset.x += x;\n            inset.y += y;\n            let svg = null;\n            let parent = current.parentNode;\n            while (!svg) {\n                if (parent.tagName === \"svg\") {\n                    svg = parent;\n                }\n                parent = current.parentNode;\n            }\n            current = svg;\n        }\n        else {\n            break;\n        }\n    }\n    return inset;\n}\n\nexport { calcInset };\n","import { warnOnce } from 'motion-utils';\nimport { updateScrollInfo } from './info.mjs';\nimport { resolveOffsets } from './offsets/index.mjs';\n\nfunction measure(container, target = container, info) {\n    /**\n     * Find inset of target within scrollable container\n     */\n    info.x.targetOffset = 0;\n    info.y.targetOffset = 0;\n    if (target !== container) {\n        let node = target;\n        while (node && node !== container) {\n            info.x.targetOffset += node.offsetLeft;\n            info.y.targetOffset += node.offsetTop;\n            node = node.offsetParent;\n        }\n    }\n    info.x.targetLength =\n        target === container ? target.scrollWidth : target.clientWidth;\n    info.y.targetLength =\n        target === container ? target.scrollHeight : target.clientHeight;\n    info.x.containerLength = container.clientWidth;\n    info.y.containerLength = container.clientHeight;\n    /**\n     * In development mode ensure scroll containers aren't position: static as this makes\n     * it difficult to measure their relative positions.\n     */\n    if (process.env.NODE_ENV !== \"production\") {\n        if (container && target && target !== container) {\n            warnOnce(getComputedStyle(container).position !== \"static\", \"Please ensure that the container has a non-static position, like 'relative', 'fixed', or 'absolute' to ensure scroll offset is calculated correctly.\");\n        }\n    }\n}\nfunction createOnScrollHandler(element, onScroll, info, options = {}) {\n    return {\n        measure: (time) => {\n            measure(element, options.target, info);\n            updateScrollInfo(element, info, time);\n            if (options.offset || options.target) {\n                resolveOffsets(element, info, options);\n            }\n        },\n        notify: () => onScroll(info),\n    };\n}\n\nexport { createOnScrollHandler };\n","import { resize, frame, cancelFrame, frameData } from 'motion-dom';\nimport { noop } from 'motion-utils';\nimport { createScrollInfo } from './info.mjs';\nimport { createOnScrollHandler } from './on-scroll-handler.mjs';\n\nconst scrollListeners = new WeakMap();\nconst resizeListeners = new WeakMap();\nconst onScrollHandlers = new WeakMap();\nconst getEventTarget = (element) => element === document.scrollingElement ? window : element;\nfunction scrollInfo(onScroll, { container = document.scrollingElement, ...options } = {}) {\n    if (!container)\n        return noop;\n    let containerHandlers = onScrollHandlers.get(container);\n    /**\n     * Get the onScroll handlers for this container.\n     * If one isn't found, create a new one.\n     */\n    if (!containerHandlers) {\n        containerHandlers = new Set();\n        onScrollHandlers.set(container, containerHandlers);\n    }\n    /**\n     * Create a new onScroll handler for the provided callback.\n     */\n    const info = createScrollInfo();\n    const containerHandler = createOnScrollHandler(container, onScroll, info, options);\n    containerHandlers.add(containerHandler);\n    /**\n     * Check if there's a scroll event listener for this container.\n     * If not, create one.\n     */\n    if (!scrollListeners.has(container)) {\n        const measureAll = () => {\n            for (const handler of containerHandlers) {\n                handler.measure(frameData.timestamp);\n            }\n            frame.preUpdate(notifyAll);\n        };\n        const notifyAll = () => {\n            for (const handler of containerHandlers) {\n                handler.notify();\n            }\n        };\n        const listener = () => frame.read(measureAll);\n        scrollListeners.set(container, listener);\n        const target = getEventTarget(container);\n        window.addEventListener(\"resize\", listener, { passive: true });\n        if (container !== document.documentElement) {\n            resizeListeners.set(container, resize(container, listener));\n        }\n        target.addEventListener(\"scroll\", listener, { passive: true });\n        listener();\n    }\n    const listener = scrollListeners.get(container);\n    frame.read(listener, false, true);\n    return () => {\n        cancelFrame(listener);\n        /**\n         * Check if we even have any handlers for this container.\n         */\n        const currentHandlers = onScrollHandlers.get(container);\n        if (!currentHandlers)\n            return;\n        currentHandlers.delete(containerHandler);\n        if (currentHandlers.size)\n            return;\n        /**\n         * If no more handlers, remove the scroll listener too.\n         */\n        const scrollListener = scrollListeners.get(container);\n        scrollListeners.delete(container);\n        if (scrollListener) {\n            getEventTarget(container).removeEventListener(\"scroll\", scrollListener);\n            resizeListeners.get(container)?.();\n            window.removeEventListener(\"resize\", scrollListener);\n        }\n    };\n}\n\nexport { scrollInfo };\n","import { resizeElement } from './handle-element.mjs';\nimport { resizeWindow } from './handle-window.mjs';\n\nfunction resize(a, b) {\n    return typeof a === \"function\" ? resizeWindow(a) : resizeElement(a, b);\n}\n\nexport { resize };\n","import { supportsScrollTimeline } from 'motion-dom';\nimport { scrollInfo } from '../track.mjs';\n\nconst timelineCache = new Map();\nfunction scrollTimelineFallback(options) {\n    const currentTime = { value: 0 };\n    const cancel = scrollInfo((info) => {\n        currentTime.value = info[options.axis].progress * 100;\n    }, options);\n    return { currentTime, cancel };\n}\nfunction getTimeline({ source, container, ...options }) {\n    const { axis } = options;\n    if (source)\n        container = source;\n    const containerCache = timelineCache.get(container) ?? new Map();\n    timelineCache.set(container, containerCache);\n    const targetKey = options.target ?? \"self\";\n    const targetCache = containerCache.get(targetKey) ?? {};\n    const axisKey = axis + (options.offset ?? []).join(\",\");\n    if (!targetCache[axisKey]) {\n        targetCache[axisKey] =\n            !options.target && supportsScrollTimeline()\n                ? new ScrollTimeline({ source: container, axis })\n                : scrollTimelineFallback({ container, ...options });\n    }\n    return targetCache[axisKey];\n}\n\nexport { getTimeline };\n","import { noop } from 'motion-utils';\nimport { attachToAnimation } from './attach-animation.mjs';\nimport { attachToFunction } from './attach-function.mjs';\n\nfunction scroll(onScroll, { axis = \"y\", container = document.scrollingElement, ...options } = {}) {\n    if (!container)\n        return noop;\n    const optionsWithDefaults = { axis, container, ...options };\n    return typeof onScroll === \"function\"\n        ? attachToFunction(onScroll, optionsWithDefaults)\n        : attachToAnimation(onScroll, optionsWithDefaults);\n}\n\nexport { scroll };\n","import { observeTimeline } from 'motion-dom';\nimport { scrollInfo } from './track.mjs';\nimport { getTimeline } from './utils/get-timeline.mjs';\n\n/**\n * If the onScroll function has two arguments, it's expecting\n * more specific information about the scroll from scrollInfo.\n */\nfunction isOnScrollWithInfo(onScroll) {\n    return onScroll.length === 2;\n}\nfunction attachToFunction(onScroll, options) {\n    if (isOnScrollWithInfo(onScroll)) {\n        return scrollInfo((info) => {\n            onScroll(info[options.axis].progress, info);\n        }, options);\n    }\n    else {\n        return observeTimeline(onScroll, getTimeline(options));\n    }\n}\n\nexport { attachToFunction };\n","import { observeTimeline } from 'motion-dom';\nimport { getTimeline } from './utils/get-timeline.mjs';\n\nfunction attachToAnimation(animation, options) {\n    const timeline = getTimeline(options);\n    return animation.attachTimeline({\n        timeline: options.target ? undefined : timeline,\n        observe: (valueAnimation) => {\n            valueAnimation.pause();\n            return observeTimeline((progress) => {\n                valueAnimation.time = valueAnimation.duration * progress;\n            }, timeline);\n        },\n    });\n}\n\nexport { attachToAnimation };\n","import { motionValue } from 'motion-dom';\nimport { invariant } from 'motion-utils';\nimport { useRef, useCallback, useEffect } from 'react';\nimport { scroll } from '../render/dom/scroll/index.mjs';\nimport { useConstant } from '../utils/use-constant.mjs';\nimport { useIsomorphicLayoutEffect } from '../utils/use-isomorphic-effect.mjs';\n\nconst createScrollMotionValues = () => ({\n    scrollX: motionValue(0),\n    scrollY: motionValue(0),\n    scrollXProgress: motionValue(0),\n    scrollYProgress: motionValue(0),\n});\nconst isRefPending = (ref) => {\n    if (!ref)\n        return false;\n    return !ref.current;\n};\nfunction useScroll({ container, target, ...options } = {}) {\n    const values = useConstant(createScrollMotionValues);\n    const scrollAnimation = useRef(null);\n    const needsStart = useRef(false);\n    const start = useCallback(() => {\n        scrollAnimation.current = scroll((_progress, { x, y, }) => {\n            values.scrollX.set(x.current);\n            values.scrollXProgress.set(x.progress);\n            values.scrollY.set(y.current);\n            values.scrollYProgress.set(y.progress);\n        }, {\n            ...options,\n            container: container?.current || undefined,\n            target: target?.current || undefined,\n        });\n        return () => {\n            scrollAnimation.current?.();\n        };\n    }, [container, target, JSON.stringify(options.offset)]);\n    useIsomorphicLayoutEffect(() => {\n        needsStart.current = false;\n        if (isRefPending(container) || isRefPending(target)) {\n            needsStart.current = true;\n            return;\n        }\n        else {\n            return start();\n        }\n    }, [start]);\n    useEffect(() => {\n        if (needsStart.current) {\n            invariant(!isRefPending(container), \"Container ref is defined but not hydrated\", \"use-scroll-ref\");\n            invariant(!isRefPending(target), \"Target ref is defined but not hydrated\", \"use-scroll-ref\");\n            return start();\n        }\n        else {\n            return;\n        }\n    }, [start]);\n    return values;\n}\n\nexport { useScroll };\n","import { cancelFrame, frame } from 'motion-dom';\nimport { useIsomorphicLayoutEffect } from '../utils/use-isomorphic-effect.mjs';\nimport { useMotionValue } from './use-motion-value.mjs';\n\nfunction useCombineMotionValues(values, combineValues) {\n    /**\n     * Initialise the returned motion value. This remains the same between renders.\n     */\n    const value = useMotionValue(combineValues());\n    /**\n     * Create a function that will update the template motion value with the latest values.\n     * This is pre-bound so whenever a motion value updates it can schedule its\n     * execution in Framesync. If it's already been scheduled it won't be fired twice\n     * in a single frame.\n     */\n    const updateValue = () => value.set(combineValues());\n    /**\n     * Synchronously update the motion value with the latest values during the render.\n     * This ensures that within a React render, the styles applied to the DOM are up-to-date.\n     */\n    updateValue();\n    /**\n     * Subscribe to all motion values found within the template. Whenever any of them change,\n     * schedule an update.\n     */\n    useIsomorphicLayoutEffect(() => {\n        const scheduleUpdate = () => frame.preRender(updateValue, false, true);\n        const subscriptions = values.map((v) => v.on(\"change\", scheduleUpdate));\n        return () => {\n            subscriptions.forEach((unsubscribe) => unsubscribe());\n            cancelFrame(updateValue);\n        };\n    });\n    return value;\n}\n\nexport { useCombineMotionValues };\n","import { motionValue } from 'motion-dom';\nimport { useContext, useState, useEffect } from 'react';\nimport { MotionConfigContext } from '../context/MotionConfigContext.mjs';\nimport { useConstant } from '../utils/use-constant.mjs';\n\n/**\n * Creates a `MotionValue` to track the state and velocity of a value.\n *\n * Usually, these are created automatically. For advanced use-cases, like use with `useTransform`, you can create `MotionValue`s externally and pass them into the animated component via the `style` prop.\n *\n * ```jsx\n * export const MyComponent = () => {\n *   const scale = useMotionValue(1)\n *\n *   return <motion.div style={{ scale }} />\n * }\n * ```\n *\n * @param initial - The initial state.\n *\n * @public\n */\nfunction useMotionValue(initial) {\n    const value = useConstant(() => motionValue(initial));\n    /**\n     * If this motion value is being used in static mode, like on\n     * the Framer canvas, force components to rerender when the motion\n     * value is updated.\n     */\n    const { isStatic } = useContext(MotionConfigContext);\n    if (isStatic) {\n        const [, setLatest] = useState(initial);\n        useEffect(() => value.on(\"change\", setLatest), []);\n    }\n    return value;\n}\n\nexport { useMotionValue };\n","import { transform } from 'motion-dom';\nimport { useConstant } from '../utils/use-constant.mjs';\nimport { useCombineMotionValues } from './use-combine-values.mjs';\nimport { useComputed } from './use-computed.mjs';\n\nfunction useTransform(input, inputRangeOrTransformer, outputRange, options) {\n    if (typeof input === \"function\") {\n        return useComputed(input);\n    }\n    const transformer = typeof inputRangeOrTransformer === \"function\"\n        ? inputRangeOrTransformer\n        : transform(inputRangeOrTransformer, outputRange, options);\n    return Array.isArray(input)\n        ? useListTransform(input, transformer)\n        : useListTransform([input], ([latest]) => transformer(latest));\n}\nfunction useListTransform(values, transformer) {\n    const latest = useConstant(() => []);\n    return useCombineMotionValues(values, () => {\n        latest.length = 0;\n        const numValues = values.length;\n        for (let i = 0; i < numValues; i++) {\n            latest[i] = values[i].get();\n        }\n        return transformer(latest);\n    });\n}\n\nexport { useTransform };\n","import { collectMotionValues } from 'motion-dom';\nimport { useCombineMotionValues } from './use-combine-values.mjs';\n\nfunction useComputed(compute) {\n    /**\n     * Open session of collectMotionValues. Any MotionValue that calls get()\n     * will be saved into this array.\n     */\n    collectMotionValues.current = [];\n    compute();\n    const value = useCombineMotionValues(collectMotionValues.current, compute);\n    /**\n     * Synchronously close session of collectMotionValues.\n     */\n    collectMotionValues.current = undefined;\n    return value;\n}\n\nexport { useComputed };\n","import { interpolate } from './interpolate.mjs';\n\nfunction transform(...args) {\n    const useImmediate = !Array.isArray(args[0]);\n    const argOffset = useImmediate ? 0 : -1;\n    const inputValue = args[0 + argOffset];\n    const inputRange = args[1 + argOffset];\n    const outputRange = args[2 + argOffset];\n    const options = args[3 + argOffset];\n    const interpolator = interpolate(inputRange, outputRange, options);\n    return useImmediate ? interpolator(inputValue) : interpolator;\n}\n\nexport { transform };\n"],"names":["observeTimeline","update","timeline","prevProgress","onFrame","currentTime","progress","value","frame","preUpdate","cancelFrame","resizeHandlers","WeakMap","observer","getSize","borderBoxAxis","svgAxis","htmlAxis","target","borderBoxSize","isSVGElement","getBBox","getWidth","getHeight","notifyTarget","_ref","get","forEach","handler","width","height","notifyAll","entries","resizeElement","ResizeObserver","elements","resolveElements","element","elementHandlers","Set","set","add","observe","delete","size","unobserve","windowCallbacks","windowResizeHandler","resizeWindow","callback","info","window","innerWidth","innerHeight","addEventListener","removeEventListener","undefined","maxElapsed","createScrollInfo","time","x","current","offset","scrollLength","targetOffset","targetLength","containerLength","velocity","y","keys","length","position","updateAxisInfo","axisName","axis","prev","prevTime","elapsed","velocityPerSecond","namedEdges","start","center","end","resolveEdge","edge","inset","arguments","delta","asNumber","parseFloat","endsWith","document","documentElement","clientWidth","clientHeight","defaultOffset","resolveOffset","targetInset","offsetDefinition","Array","isArray","targetPoint","containerPoint","trim","includes","split","ScrollOffset","Enter","Exit","Any","All","point","resolveOffsets","container","options","lengthLabel","isHTMLElement","offsetLeft","offsetTop","offsetParent","tagName","svgBoundingBox","getBoundingClientRect","parentElement","parentBoundingBox","left","top","SVGGraphicsElement","svg","parent","parentNode","calcInset","targetSize","scrollWidth","scrollHeight","getTargetSize","containerSize","hasChanged","interpolate","numOffsets","i","interpolatorOffsets","clamp","createOnScrollHandler","onScroll","measure","node","updateScrollInfo","notify","scrollListeners","resizeListeners","onScrollHandlers","getEventTarget","scrollingElement","scrollInfo","noop","containerHandlers","containerHandler","has","measureAll","frameData","timestamp","listener","read","passive","b","a","currentHandlers","scrollListener","timelineCache","Map","getTimeline","source","containerCache","targetKey","targetCache","axisKey","join","supportsScrollTimeline","ScrollTimeline","cancel","scrollTimelineFallback","scroll","optionsWithDefaults","isOnScrollWithInfo","attachToFunction","animation","attachTimeline","valueAnimation","pause","duration","attachToAnimation","createScrollMotionValues","scrollX","motionValue","scrollY","scrollXProgress","scrollYProgress","isRefPending","ref","useScroll","values","useConstant","scrollAnimation","useRef","needsStart","useCallback","_progress","JSON","stringify","useIsomorphicLayoutEffect","useEffect","invariant","useCombineMotionValues","combineValues","initial","isStatic","useContext","MotionConfigContext","setLatest","useState","on","useMotionValue","updateValue","scheduleUpdate","preRender","subscriptions","map","v","unsubscribe","useTransform","input","inputRangeOrTransformer","outputRange","compute","collectMotionValues","useComputed","transformer","useImmediate","argOffset","inputValue","inputRange","interpolator","transform","useListTransform","latest","numValues"],"sourceRoot":""}